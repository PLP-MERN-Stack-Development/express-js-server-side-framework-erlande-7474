// ===============================
// EXPRESS.JS RESTFUL API PROJECT
// ===============================

require('dotenv').config();
const express = require('express');
const morgan = require('morgan');

const app = express();

// -------------------------------
// Middleware Setup
// -------------------------------
app.use(express.json());
app.use(morgan('dev'));

// Custom Logger Middleware
const logger = (req, res, next) => {
  console.log(`[${new Date().toISOString()}] ${req.method} ${req.originalUrl}`);
  next();
};

// Authentication Middleware
const auth = (req, res, next) => {
  const apiKey = req.headers['x-api-key'];
  if (!apiKey || apiKey !== process.env.API_KEY) {
    return res.status(401).json({ message: 'Unauthorized' });
  }
  next();
};

// -------------------------------
// Mock Product Data
// -------------------------------
let products = [
  { id: 1, name: 'Laptop', price: 1200 },
  { id: 2, name: 'Phone', price: 800 },
  { id: 3, name: 'Tablet', price: 500 },
  { id: 4, name: 'Headphones', price: 150 },
  { id: 5, name: 'Monitor', price: 300 },
  { id: 6, name: 'Keyboard', price: 100 }
];

// -------------------------------
// Routes
// -------------------------------
app.use('/api/products', logger);

// GET /api/products ‚Äî Get all products (with search, filter, pagination)
app.get('/api/products', (req, res) => {
  let result = [...products];
  const { search, minPrice, maxPrice, page = 1, limit = 5 } = req.query;

  // Filtering
  if (minPrice) result = result.filter(p => p.price >= Number(minPrice));
  if (maxPrice) result = result.filter(p => p.price <= Number(maxPrice));

  // Searching
  if (search)
    result = result.filter(p =>
      p.name.toLowerCase().includes(search.toLowerCase())
    );

  // Pagination
  const start = (page - 1) * limit;
  const end = start + Number(limit);
  const paginated = result.slice(start, end);

  res.status(200).json({
    success: true,
    total: result.length,
    page: Number(page),
    limit: Number(limit),
    data: paginated
  });
});

// GET /api/products/:id ‚Äî Get one product
app.get('/api/products/:id', (req, res, next) => {
  const product = products.find(p => p.id === Number(req.params.id));
  if (!product) return next({ status: 404, message: 'Product not found' });
  res.status(200).json(product);
});

// POST /api/products ‚Äî Create new product
app.post('/api/products', auth, (req, res, next) => {
  const { name, price } = req.body;
  if (!name || !price)
    return next({ status: 400, message: 'Name and price are required' });

  const newProduct = {
    id: products.length + 1,
    name,
    price: Number(price)
  };
  products.push(newProduct);
  res.status(201).json(newProduct);
});

// PUT /api/products/:id ‚Äî Update product
app.put('/api/products/:id', auth, (req, res, next) => {
  const product = products.find(p => p.id === Number(req.params.id));
  if (!product) return next({ status: 404, message: 'Product not found' });

  product.name = req.body.name || product.name;
  product.price = req.body.price || product.price;

  res.status(200).json(product);
});

// DELETE /api/products/:id ‚Äî Delete product
app.delete('/api/products/:id', auth, (req, res, next) => {
  const index = products.findIndex(p => p.id === Number(req.params.id));
  if (index === -1) return next({ status: 404, message: 'Product not found' });

  products.splice(index, 1);
  res.status(204).send();
});

// -------------------------------
// Global Error Handler
// -------------------------------
app.use((err, req, res, next) => {
  const status = err.status || 500;
  const message = err.message || 'Internal Server Error';
  res.status(status).json({ success: false, message });
});

// -------------------------------
// Server Start
// -------------------------------
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`‚úÖ Server running on port ${PORT}`));

/*
=====================================
üìò API DOCUMENTATION
=====================================

1Ô∏è‚É£ GET /api/products
   ‚Üí Get all products (supports search, minPrice, maxPrice, page, limit)
   Example: /api/products?search=phone&minPrice=100&maxPrice=900&page=1&limit=2

2Ô∏è‚É£ GET /api/products/:id
   ‚Üí Get single product by ID

3Ô∏è‚É£ POST /api/products
   ‚Üí Create a new product
   Header: x-api-key: secret123
   Body: { "name": "Smartwatch", "price": 250 }

4Ô∏è‚É£ PUT /api/products/:id
   ‚Üí Update product by ID
   Header: x-api-key: secret123
   Body: { "name": "Updated Laptop", "price": 1300 }

5Ô∏è‚É£ DELETE /api/products/:id
   ‚Üí Delete product by ID
   Header: x-api-key: secret123

üîë Example .env file:
PORT=5000
API_KEY=secret123
=====================================
*/